# Generated by Django 5.2.5 on 2025-08-16 19:13

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the author's full name", max_length=200)),
                ('biography', models.TextField(blank=True, help_text='Enter a brief biography of the author')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the member's full name", max_length=200)),
                ('email', models.EmailField(help_text="Enter the member's email address", max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('membership_date', models.DateField(default=django.utils.timezone.now, help_text='Date when membership was created')),
                ('phone_number', models.CharField(blank=True, help_text="Enter the member's phone number", max_length=15)),
                ('address', models.TextField(blank=True, help_text="Enter the member's address")),
                ('is_active', models.BooleanField(default=True, help_text='Whether the membership is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the book title', max_length=200)),
                ('isbn', models.CharField(help_text='Enter the 13-digit ISBN', max_length=13, unique=True)),
                ('category', models.CharField(choices=[('fiction', 'Fiction'), ('non-fiction', 'Non-Fiction'), ('science', 'Science'), ('technology', 'Technology'), ('history', 'History'), ('biography', 'Biography'), ('philosophy', 'Philosophy'), ('other', 'Other')], default='other', max_length=20)),
                ('availability_status', models.CharField(choices=[('available', 'Available'), ('borrowed', 'Borrowed'), ('reserved', 'Reserved'), ('maintenance', 'Under Maintenance')], default='available', max_length=20)),
                ('publication_year', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, help_text='Enter a brief description of the book')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='library.author')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='BorrowRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('borrow_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the book was borrowed')),
                ('return_date', models.DateTimeField(blank=True, help_text='Date when the book was returned', null=True)),
                ('due_date', models.DateTimeField(help_text='Date when the book should be returned')),
                ('is_returned', models.BooleanField(default=False, help_text='Whether the book has been returned')),
                ('fine_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Fine amount if returned late', max_digits=10)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the borrowing')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrow_records', to='library.book')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrow_records', to='library.member')),
            ],
            options={
                'ordering': ['-borrow_date'],
            },
        ),
    ]
